import re
import json
import requests
from flask import Flask, request
from pyrogram import Client, filters
from pyrogram.types import Message

API_ID = 12345678  # ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ API ID
API_HASH = "your_api_hash"
BOT_TOKEN = "your_bot_token"

app = Flask(__name__)
bot = Client("bypass_bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

# ‚úÖ whitelist ‡¶ì ‡¶∂‡¶∞‡ßç‡¶ü‡¶®‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶•‡¶°
SHORTNER_METHODS = {
    "droplink.co": "droplink",
    "indiaearnx.com": "indiaearnx"
}

# ‚úÖ ‡¶¨‡¶æ‡¶á‡¶™‡¶æ‡¶∏ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ó‡ßÅ‡¶≤‡ßã
def bypass_droplink(url):
    try:
        res = requests.get(url, allow_redirects=True, timeout=10)
        return res.url
    except:
        return None

def bypass_indiaearnx(url):
    try:
        res = requests.get(url, allow_redirects=True, timeout=10)
        return res.url
    except:
        return None

def fallback_bypass(url):
    try:
        res = requests.get(url, allow_redirects=True, timeout=10)
        return res.url
    except:
        return None

# ‚úÖ ‡¶∂‡¶∞‡ßç‡¶ü‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶ï‡¶≤
def bypass_link(url):
    for domain, method in SHORTNER_METHODS.items():
        if domain in url:
            if method == "droplink":
                return bypass_droplink(url)
            elif method == "indiaearnx":
                return bypass_indiaearnx(url)
    # fallback
    return fallback_bypass(url)

# ‚úÖ whitelist ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°
@bot.on_message(filters.command("addshortner") & filters.private)
async def add_shortner_handler(client, message: Message):
    try:
        cmd = message.text.split()
        if len(cmd) != 3:
            return await message.reply("‚ö†Ô∏è ‡¶∏‡¶†‡¶ø‡¶ï ‡¶´‡¶∞‡ßç‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü:\n`/addshortner domain.com method`", quote=True)

        domain, method = cmd[1], cmd[2]
        SHORTNER_METHODS[domain] = method
        await message.reply(f"‚úÖ `{domain}` ‡¶∂‡¶∞‡ßç‡¶ü‡¶®‡¶æ‡¶∞ `{method}` ‡¶Æ‡ßá‡¶•‡¶°‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá!")
    except Exception as e:
        await message.reply(f"‚ùå ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e}")

# ‚úÖ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶ß‡¶∞‡¶æ‡¶∞ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
@bot.on_message(filters.text & ~filters.command("addshortner"))
async def link_handler(client, message: Message):
    urls = re.findall(r'(https?://[^\s]+)', message.text)
    if not urls:
        return

    for url in urls:
        await message.reply("üîÑ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶¨‡¶æ‡¶á‡¶™‡¶æ‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...", quote=True)
        final = bypass_link(url)
        if final and final != url:
            await message.reply(f"‚úÖ ‡¶Æ‡ßÇ‡¶≤ ‡¶≤‡¶ø‡¶Ç‡¶ï:\n{final}", quote=True)
        else:
            await message.reply("‚ùå ‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶¨‡¶æ‡¶á‡¶™‡¶æ‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§", quote=True)

# ‚úÖ Flask route (optional deploy for webhook)
@app.route("/")
def home():
    return "Bypass Bot is Alive!"

if __name__ == "__main__":
    import threading
    threading.Thread(target=lambda: bot.run()).start()
    app.run(host="0.0.0.0", port=5000)
